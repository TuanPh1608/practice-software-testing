name: CI/CD Pipeline 🚀

on:
  push:
    branches: [ test-api-workflow, main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  SPRINT: "sprint5-with-bugs"

jobs:
  # Single Job: Complete CI Pipeline
  ci-pipeline:
    name: 🚀 Complete CI/CD Pipeline
    runs-on: ubuntu-22.04
    
    steps:
      # Stage 1: Setup
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # Stage 2: Build Once
      - name: 🏗️ Build application stack
        env:
          DISABLE_LOGGING: "true"
        run: |
          echo "Building application for ${{ env.SPRINT }}"
          docker compose -f docker-compose.yml build --no-cache
          
      - name: 🚀 Start application stack
        env:
          DISABLE_LOGGING: "true"
        run: |
          docker compose -f docker-compose.yml up -d
          
      - name: ⏳ Wait for services startup
        run: |
          echo "Waiting for services to be ready..."
          sleep 60
          
      # Stage 3: Database Setup
      - name: ️ Setup database
        run: |
          echo "Running database migrations..."
          docker compose exec -T laravel-api php artisan migrate:refresh --seed --force
          
      - name: ✅ Verify database setup
        run: |
          echo "Verifying database status..."
          docker compose exec -T laravel-api php artisan migrate:status
          
      # Stage 4: Health Check
      - name: 🩺 API health checks
        run: |
          echo "=== Health Check: API Status ==="
          curl -f http://localhost:8091/status || exit 1
          
          echo "=== Health Check: Core Endpoints ==="
          curl -f http://localhost:8091/products || echo "Products endpoint needs auth"
          curl -f http://localhost:8091/categories || echo "Categories endpoint needs auth" 
          curl -f http://localhost:8091/brands || echo "Brands endpoint needs auth"
          
      # Stage 5: Setup Newman
      - name: ⚙️ Setup Node.js & Newman
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: 📦 Install Newman
        run: npm install -g newman
        
      # Stage 6: API Tests
      - name: 🧪 Run Authentication Tests
        run: |
          echo "Running Authentication API tests..."
          newman run collections/Authentication.postman_collection.json \
            --environment environments/CI-Docker.postman_environment.json \
            --reporters cli,json \
            --reporter-json-export results-Authentication.json \
            --bail || echo "Authentication tests completed with issues"
            
      - name: 🧪 Run Brands Tests
        run: |
          echo "Running Brands API tests..."
          newman run collections/API1-Brands-Search.postman_collection.json \
            --environment environments/CI-Docker.postman_environment.json \
            --reporters cli,json \
            --reporter-json-export results-Brands.json \
            --bail || echo "Brands tests completed with issues"
            
      - name: 🧪 Run Categories Tests
        run: |
          echo "Running Categories API tests..."
          newman run collections/API2-Categories-Search.postman_collection.json \
            --environment environments/CI-Docker.postman_environment.json \
            --reporters cli,json \
            --reporter-json-export results-Categories.json \
            --bail || echo "Categories tests completed with issues"
            
      - name: 🧪 Run Invoice Tests
        run: |
          echo "Running Invoice API tests..."
          newman run collections/API3-Invoice-Status.postman_collection.json \
            --environment environments/CI-Docker.postman_environment.json \
            --reporters cli,json \
            --reporter-json-export results-Invoices.json \
            --bail || echo "Invoice tests completed with issues"
            
      # Stage 7: Results & Cleanup
      - name: 📊 Upload all test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-results-complete
          path: results-*.json
          retention-days: 7
          
      - name: 📋 Generate test summary
        if: always()
        run: |
          echo "## 🧪 API Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for result in results-*.json; do
            if [ -f "$result" ]; then
              suite_name=$(basename "$result" .json | sed 's/results-//')
              echo "| $suite_name | ✅ Completed |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "Cleaning up Docker resources..."
          docker compose down -v || echo "Cleanup completed"
