name: API Testing

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: "18"
  SPRINT: "sprint5-with-bugs"
  DISABLE_LOGGING: "true"

jobs:
  api-testing:
    name: 🧪 Complete API Testing
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Start Application
        run: |
          echo "🚀 Starting Practice Software Testing application..."
          docker compose -f docker-compose.yml up -d --force-recreate

          echo "⏳ Waiting for composer to install dependencies..."
          # Wait for composer to finish
          while docker compose ps composer | grep -q "running\|Up"; do
            echo "Composer still installing dependencies..."
            sleep 10
          done

          echo "✅ Composer finished installing dependencies"
          docker compose ps

      - name: ⏱️ Wait for Services
        run: |
          echo "⏱️ Waiting for services to be ready..."
          echo "🔍 Checking container status..."
          docker compose ps

          echo "⏳ Waiting for Laravel API to be responsive..."
          max_attempts=30
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Testing API health..."
            
            if curl -f -s http://localhost:8091/status > /dev/null 2>&1; then
              echo "✅ API is responding! Continuing..."
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo "❌ API failed to respond after $max_attempts attempts"
              echo "🔍 Container status:"
              docker compose ps
              echo "🔍 Laravel logs:"
              docker compose logs laravel-api --tail=50
              exit 1
            else
              echo "⏳ API not ready yet, waiting 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done

          echo "🎉 API is ready! Running final health check..."
          curl -v http://localhost:8091/status
        shell: bash

      - name: 🌱 Setup Database
        run: |
          echo "🌱 Setting up database with seed data..."
          docker compose exec -T laravel-api php artisan migrate:refresh --seed

      - name: 🔧 Laravel Search APIs Readiness Check
        run: |
          echo "🔧 Ensuring Laravel search APIs are fully functional..."

          # Clear all caches first
          echo "🧹 Clearing Laravel caches..."
          docker compose exec -T laravel-api php artisan cache:clear || echo "Cache clear failed"
          docker compose exec -T laravel-api php artisan config:clear || echo "Config clear failed"
          docker compose exec -T laravel-api php artisan route:clear || echo "Route clear failed"

          # Re-cache for optimization
          echo "⚡ Re-caching Laravel..."
          docker compose exec -T laravel-api php artisan config:cache || echo "Config cache failed"
          docker compose exec -T laravel-api php artisan route:cache || echo "Route cache failed"

          echo "📊 Verifying database connectivity and data..."
          docker compose exec -T laravel-api php artisan migrate:status || echo "Migration status failed"

          echo "🔍 Testing search APIs readiness with progressive checks..."
          max_attempts=20
          attempt=1
          search_ready=false

          while [ $attempt -le $max_attempts ]; do
            echo "🔄 Search API test $attempt/$max_attempts..."
            
            # Test brands search endpoint
            brands_response=$(curl -s -w "%{http_code}" "http://localhost:8091/brands/search?q=test" 2>/dev/null)
            brands_status="${brands_response: -3}"
            
            echo "📊 Brands search status: $brands_status"
            
            # Check if we get valid response (200, 422 for validation, or 404 for no results)
            if [ "$brands_status" = "200" ] || [ "$brands_status" = "422" ] || [ "$brands_status" = "404" ]; then
              echo "✅ Search APIs are ready! (Status: $brands_status)"
              search_ready=true
              break
            elif [ "$brands_status" = "500" ]; then
              echo "⚠️ Still getting 500 - Laravel may need more time to initialize..."
              
              # Show some debug info every 5 attempts
              if [ $((attempt % 5)) -eq 0 ]; then
                echo "🔍 Debug info at attempt $attempt:"
                docker compose exec -T laravel-api php artisan route:list | grep -E "(brands|categories)" | head -5 || echo "No search routes found"
                docker compose logs laravel-api --tail=5 2>/dev/null || echo "No recent logs"
              fi
            else
              echo "⏳ Unexpected status: $brands_status - retrying..."
            fi
            
            if [ $attempt -eq $max_attempts ]; then
              echo "⚠️ Search APIs still not ready after $max_attempts attempts"
              echo "🔍 Final debugging information:"
              docker compose exec -T laravel-api php artisan about || echo "Laravel about failed"
              echo "Continuing with tests anyway..."
              break
            fi
            
            echo "⏳ Waiting 10 seconds for Laravel search functionality to initialize..."
            sleep 10
            attempt=$((attempt + 1))
          done

      - name: 🔧 Debug Laravel Application
        run: |
          echo "🔧 Debugging Laravel application..."

          echo "📋 Laravel Environment:"
          docker compose exec -T laravel-api php artisan about

          echo "🗄️ Database Status:"
          docker compose exec -T laravel-api php artisan migrate:status

          echo "👤 Check if users exist:"
          docker compose exec -T laravel-api php artisan db:show

          echo "📝 Laravel Logs (last 20 lines):"
          docker compose exec -T laravel-api tail -20 /var/www/storage/logs/laravel.log || echo "No Laravel logs found"

          echo "🐳 All Container Status:"
          docker compose ps

          echo "🌐 Container Logs:"
          docker compose logs --tail=30

      - name: � Laravel Optimization
        run: |
          echo "� Optimizing Laravel for better performance..."
          docker compose exec -T laravel-api php artisan config:cache
          docker compose exec -T laravel-api php artisan route:cache
          docker compose exec -T laravel-api php artisan view:cache

          echo "🔍 Final API connectivity test:"
          curl -I 'http://localhost:8091/brands' || echo "Brands endpoint not accessible"
        continue-on-error: true

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📦 Install Dependencies
        run: npm install

      - name: 📁 Create Reports Directory
        run: mkdir -p reports

      - name: 🐛 Deep Laravel Debug Analysis
        run: |
          echo "🔍 DEEP LARAVEL DEBUGGING - Investigating 500 errors..."

          echo "� Laravel Error Logs (Last 100 lines):"
          docker compose exec -T laravel-api tail -100 /var/www/storage/logs/laravel.log || echo "No Laravel logs"

          echo -e "\n🌐 Nginx Error Logs:"
          docker compose logs web 2>&1 | tail -20 || echo "No Nginx logs"

          echo -e "\n🗂️ All Laravel Routes:"
          docker compose exec -T laravel-api php artisan route:list || echo "Route list failed"

          echo -e "\n🔍 Testing search endpoints with verbose output:"
          echo "=== BRANDS SEARCH TEST ==="
          curl -i -X GET 'http://localhost:8091/brands/search?q=test' 2>&1 | head -50

          echo -e "\n=== CATEGORIES SEARCH TEST ==="  
          curl -i -X GET 'http://localhost:8091/categories/search?q=tool' 2>&1 | head -50

          echo -e "\n� Laravel Environment Check:"
          docker compose exec -T laravel-api php artisan about || echo "Laravel about failed"

          echo -e "\n� Laravel Configuration:"
          docker compose exec -T laravel-api php artisan config:show database || echo "DB config failed"
        continue-on-error: true

      - name: 🔐 Run Authentication API Tests
        run: |
          echo "🔐 Running Authentication API Tests..."
          npm run api:test:auth || echo "❌ Authentication tests failed"
        continue-on-error: true

      - name: 🏷️ Run Brands Search API Tests
        run: |
          echo "🏷️ Running Brands Search API Tests..."
          npm run api:test:brands || echo "❌ Brands tests failed"
        continue-on-error: true

      - name: 📂 Run Categories Search API Tests
        run: |
          echo "📂 Running Categories Search API Tests..."
          npm run api:test:categories || echo "❌ Categories tests failed"
        continue-on-error: true

      - name: 📋 Run Invoice Status API Tests
        run: |
          echo "📋 Running Invoice Status API Tests..."
          npm run api:test:invoices || echo "❌ Invoice tests failed"
        continue-on-error: true

      - name: 📊 List Generated Reports
        run: |
          echo "📊 Generated Test Reports:"
          ls -la reports/ || echo "No reports directory found"

      - name: 📤 Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: api-test-reports
          path: reports/
          retention-days: 30

      - name: 🧹 Cleanup
        if: always()
        run: |
          echo "🧹 Stopping containers..."
          docker compose down || echo "No containers to stop"

      - name: 📋 Final Summary
        if: always()
        run: |
          echo "🏁 CS423 API Testing Completed"
          echo "✅ All API test suites have been executed"
          echo "📊 Reports uploaded as artifacts"
