{
	"info": {
		"_postman_id": "9e328e18-fcdf-475d-9859-7927f3b09457",
		"name": "API3-Invoice-Status",
		"description": "Test case cho API cập nhật trạng thái hóa đơn PUT /invoices/{id}/status",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "47786634",
		"_collection_link": "https://patuan22-7848508.postman.co/workspace/HW07-API-Testing~881d5aae-f847-4366-bd49-426942462a2c/collection/47786634-9e328e18-fcdf-475d-9859-7927f3b09457?action=share&source=collection_link&creator=47786634"
	},
	"item": [
		{
			"name": "Authentication Tests",
			"item": [
				{
					"name": "INV-001-Valid-admin-token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid admin token access\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status updated successfully\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.success || responseJson.message).to.be.ok;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-002-No-authorization-header",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Should return 401 Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Authentication required message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.error).to.include(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"// 🚨 CRITICAL BUG DETECTION\r",
									"pm.test(\"🚨 CRITICAL SECURITY CHECK: Authentication bypass\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 CRITICAL SECURITY BUG: No authentication required!\");\r",
									"        console.log(\"Invoice status can be changed without authentication!\");\r",
									"        pm.globals.set(\"critical_security_bug_no_auth\", \"FOUND\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Security mechanism active\", function () {\r",
									"    pm.expect(pm.response.code).to.not.equal(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-003-Empty-token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty token should return 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Empty token validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.error).to.be.ok;\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Empty token validation\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 SECURITY BUG: Empty token accepted!\");\r",
									"        pm.globals.set(\"security_bug_empty_token\", \"found\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": ""
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-004-Invalid-token-format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid token format rejected\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Token format validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.include(\"unauthorized\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "invalid-token-format"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-005-Expired-token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Expired token rejected\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Token expiry validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.success || responseJson.message).to.be.ok;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{expired_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-006-User-without-admin-permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User without permission denied\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Permission validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.satisfy(msg => \r",
									"        msg.includes(\"permission\") || msg.includes(\"forbidden\") || msg.includes(\"access\")\r",
									"    );\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 SECURITY CHECK: Permission enforcement\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 SECURITY BUG: Regular user can change invoice status!\");\r",
									"        pm.globals.set(\"security_bug_permission\", \"found\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{user_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-007-User-accessing-own-invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User can access own invoice\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Own invoice access allowed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.success || responseJson.message).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"User authorization working\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{user_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{user_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-008-User-accessing-other-user-invoice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User cannot access other user invoice\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Access control working\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.include(\"access\");\r",
									"});\r",
									"\r",
									"// CRITICAL SECURITY BUG DETECTION\r",
									"pm.test(\"CRITICAL SECURITY CHECK: Access control\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"CRITICAL SECURITY BUG: User can access other user's invoices!\");\r",
									"        console.log(\"This is a major security vulnerability - authorization bypass!\");\r",
									"        pm.globals.set(\"critical_security_bug_access_control\", \"FOUND\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{user_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{other_user_invoice}}/status"
					},
					"response": []
				}
			]
		},
		{
			"name": "State Transition Testing",
			"item": [
				{
					"name": "INV-009-AWAITING_FULFILLMENT-to-AWAITING_SHIPMENT-Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid transition AWAITING_FULFILLMENT->AWAITING_SHIPMENT succeeds\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status updated successfully\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Normal workflow progression\", function () {\r",
									"    console.log(\"✅ VALID TRANSITION: AWAITING_FULFILLMENT → AWAITING_SHIPMENT successful\");\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure invoice is in AWAITING_FULFILLMENT state first\r",
									"const setFulfillmentRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"awaiting_fulfillment_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"AWAITING_FULFILLMENT\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setFulfillmentRequest, function(err, response) {\r",
									"    if (!err && response.code === 200) {\r",
									"        console.log(\"✅ Pre-condition: Invoice set to AWAITING_FULFILLMENT state\");\r",
									"    } else {\r",
									"        console.log(\"⚠️ Pre-condition failed: Could not set AWAITING_FULFILLMENT state\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{pending_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-010-AWAITING_FULFILLMENT-to-ON_HOLD-Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid transition AWAITING_FULFILLMENT->ON_HOLD\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Hold functionality from fulfillment allowed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Pause processing capability\", function () {\r",
									"    console.log(\"✅ VALID TRANSITION: AWAITING_FULFILLMENT → ON_HOLD successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to AWAITING_FULFILLMENT first\r",
									"const setFulfillmentRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"awaiting_fulfillment_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"AWAITING_FULFILLMENT\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setFulfillmentRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"ON_HOLD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{pending_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-011-ON_HOLD-to-AWAITING_FULFILLMENT-Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid transition ON_HOLD->AWAITING_FULFILLMENT\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Resume from hold allowed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Hold resume functionality\", function () {\r",
									"    console.log(\"✅ VALID TRANSITION: ON_HOLD → AWAITING_FULFILLMENT successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to ON_HOLD first\r",
									"const setHoldRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"on_hold_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"ON_HOLD\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setHoldRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_FULFILLMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{pending_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-012-ON_HOLD-to-AWAITING_SHIPMENT-Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid transition ON_HOLD->AWAITING_SHIPMENT\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skip to shipment from hold allowed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to ON_HOLD first\r",
									"const setHoldRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"on_hold_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"ON_HOLD\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setHoldRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{paid_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-013-AWAITING_SHIPMENT-to-SHIPPED-Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid transition AWAITING_SHIPMENT->SHIPPED\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Shipping process allowed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Normal shipping workflow\", function () {\r",
									"    console.log(\"✅ VALID TRANSITION: AWAITING_SHIPMENT → SHIPPED successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to AWAITING_SHIPMENT first\r",
									"const setShipmentRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"awaiting_shipment_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"AWAITING_SHIPMENT\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setShipmentRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{paid_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-014-SHIPPED-to-COMPLETED-Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid transition SHIPPED->COMPLETED\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Final completion allowed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Completion workflow\", function () {\r",
									"    console.log(\"✅ VALID TRANSITION: SHIPPED → COMPLETED successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to SHIPPED first\r",
									"const setShippedRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"shipped_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"SHIPPED\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setShippedRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"COMPLETED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{overdue_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-015-AWAITING_FULFILLMENT-to-SHIPPED-Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid transition AWAITING_FULFILLMENT->SHIPPED\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Skip shipment preparation allowed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Express shipping workflow\", function () {\r",
									"    console.log(\"✅ VALID TRANSITION: AWAITING_FULFILLMENT → SHIPPED (skip prep) successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to AWAITING_FULFILLMENT first\r",
									"const setFulfillmentRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"awaiting_fulfillment_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"AWAITING_FULFILLMENT\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setFulfillmentRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{processing_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-016-AWAITING_FULFILLMENT-to-COMPLETED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Valid transition AWAITING_FULFILLMENT->COMPLETED\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Direct completion allowed\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Express completion workflow\", function () {\r",
									"    console.log(\"✅ VALID TRANSITION: AWAITING_FULFILLMENT → COMPLETED (direct) successful\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to AWAITING_FULFILLMENT first\r",
									"const setFulfillmentRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"awaiting_fulfillment_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"AWAITING_FULFILLMENT\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setFulfillmentRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"COMPLETED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{draft_invoice}}/status"
					},
					"response": []
				}
			]
		},
		{
			"name": "Invalid State Transitions",
			"item": [
				{
					"name": "INV-017-COMPLETED-to-AWAITING_FULFILLMENT-Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid transition COMPLETED->AWAITING_FULFILLMENT should be blocked\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Business rule violation error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.satisfy(msg => \r",
									"        msg.includes(\"invalid\") || msg.includes(\"cannot\") || msg.includes(\"completed\")\r",
									"    );\r",
									"});\r",
									"\r",
									"// 🚨 CRITICAL BUG DETECTION\r",
									"pm.test(\"🚨 CRITICAL BUG CHECK: Completed immutability\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨🚨🚨 CRITICAL BUG FOUND: COMPLETED INVOICE CAN BE REVERTED! 🚨🚨🚨\");\r",
									"        console.log(\"This violates core business logic - completed invoices are final!\");\r",
									"        console.log(\"Business Rule Violation: COMPLETED is immutable final state\");\r",
									"        pm.globals.set(\"critical_bug_completed_revert\", \"FOUND\");\r",
									"        pm.environment.set(\"bug_report_needed\", \"CRITICAL: Completed invoice state reversion allowed\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Final state integrity maintained\", function () {\r",
									"    // COMPLETED should be final and immutable\r",
									"    pm.expect(pm.response.code).to.not.equal(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure invoice is in COMPLETED state first\r",
									"const setCompletedRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"completed_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"COMPLETED\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setCompletedRequest, function(err, response) {\r",
									"    if (!err && response.code === 200) {\r",
									"        console.log(\"✅ Pre-condition: Invoice set to COMPLETED state\");\r",
									"    } else {\r",
									"        console.log(\"⚠️ Pre-condition may have failed\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_FULFILLMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{paid_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-018-COMPLETED-to-ON_HOLD-Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid transition COMPLETED->ON_HOLD blocked\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Cannot put completed invoice on hold\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.include(\"completed\");\r",
									"});\r",
									"\r",
									"// 🚨 CRITICAL BUG DETECTION\r",
									"pm.test(\"🚨 CRITICAL BUG CHECK: Completed finality\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 CRITICAL BUG: COMPLETED invoice can be put ON_HOLD!\");\r",
									"        pm.globals.set(\"critical_bug_completed_to_hold\", \"FOUND\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to COMPLETED first\r",
									"const setCompletedRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"completed_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"COMPLETED\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setCompletedRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"ON_HOLD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{paid_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-019-SHIPPED-to-AWAITING_FULFILLMENT-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to SHIPPED first\r",
									"const setShippedRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"shipped_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"SHIPPED\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setShippedRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid transition SHIPPED->AWAITING_FULFILLMENT blocked\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Cannot reverse to fulfillment\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.satisfy(msg => \r",
									"        msg.includes(\"cannot\") || msg.includes(\"invalid\") || msg.includes(\"backward\")\r",
									"    );\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Backward progression prevention\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG: SHIPPED invoice can be reverted to AWAITING_FULFILLMENT!\");\r",
									"        pm.globals.set(\"bug_shipped_backward\", \"found\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_FULFILLMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{cancelled_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-020-SHIPPED-to-ON_HOLD-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to SHIPPED first\r",
									"const setShippedRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"shipped_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"SHIPPED\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setShippedRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid transition SHIPPED->ON_HOLD blocked\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Cannot put shipped invoice on hold\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.include(\"shipped\");\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Shipped hold prevention\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG: SHIPPED invoice can be put ON_HOLD!\");\r",
									"        pm.globals.set(\"bug_shipped_to_hold\", \"found\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"ON_HOLD\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-021-SHIPPED-to-AWAITING_SHIPMENT-Invalid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set to SHIPPED first\r",
									"const setShippedRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"shipped_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"SHIPPED\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setShippedRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid transition SHIPPED->AWAITING_SHIPMENT blocked\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Cannot revert shipped to awaiting shipment\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error || responseJson.message).to.be.ok;\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Shipped reversion prevention\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG: SHIPPED invoice can be reverted to AWAITING_SHIPMENT!\");\r",
									"        pm.globals.set(\"bug_shipped_revert\", \"found\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"AWAITING_SHIPMENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{refunded_invoice}}/status"
					},
					"response": []
				},
				{
					"name": "INV-023-Same-status-idempotency",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure invoice is SHIPPED first\r",
									"const setShippedRequest = {\r",
									"    url: pm.environment.get(\"base_url\") + \"/invoices/\" + pm.environment.get(\"shipped_invoice\") + \"/status\",\r",
									"    method: \"PUT\",\r",
									"    header: {\r",
									"        \"Authorization\": \"Bearer \" + pm.environment.get(\"auth_token\"),\r",
									"        \"Content-Type\": \"application/json\"\r",
									"    },\r",
									"    body: {\r",
									"        mode: \"raw\",\r",
									"        raw: JSON.stringify({\"status\": \"SHIPPED\"})\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(setShippedRequest);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Same status idempotency works\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Idempotent operation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"No side effects from duplicate status\", function () {\r",
									"    console.log(\"✅ IDEMPOTENCY: SHIPPED → SHIPPED handled correctly\");\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{paid_invoice}}/status"
					},
					"response": []
				}
			]
		},
		{
			"name": "Domain Testing",
			"item": [
				{
					"name": "INV-025-Invalid-status-value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid status value rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Status validation error\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.include(\"not found\");\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Status value validation\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG: Invalid status value accepted!\");\r",
									"        pm.globals.set(\"bug_invalid_status\", \"found\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"INVALID_STATUS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-026-Empty-status-value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty status should be rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Empty status validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.satisfy(msg => \r",
									"        msg.includes(\"empty\") || msg.includes(\"required\") || msg.includes(\"not found\")\r",
									"    );\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Empty status validation\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG: Empty status value accepted!\");\r",
									"        pm.globals.set(\"bug_empty_status\", \"found\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-027-Null-status-value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Null status should be rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Null value validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error || responseJson.message).to.be.ok;\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Null status validation\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG: Null status value accepted!\");\r",
									"        pm.globals.set(\"bug_null_status\", \"not found\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-028-Numeric-status-value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Numeric status should be rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Type validation error message\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.satisfy(msg => \r",
									"        msg.includes(\"string\") || msg.includes(\"not found\") || msg.includes(\"type\")\r",
									"    );\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Data type validation\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG FOUND: Numeric status value accepted (should only accept strings)!\");\r",
									"        console.log(\"Type validation missing - API accepts number instead of string\");\r",
									"        pm.globals.set(\"bug_type_validation\", \"FOUND\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-029-Boolean-status-value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Boolean status should be rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Boolean type validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.include(\"not found\");\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Boolean type validation\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG: Boolean status value accepted!\");\r",
									"        pm.globals.set(\"bug_boolean_status\", \"found\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-030-Array-status-value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Array status should be rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Array type validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    const errorMsg = (responseJson.error || responseJson.message || \"\").toLowerCase();\r",
									"    pm.expect(errorMsg).to.include(\"not found\");\r",
									"});\r",
									"\r",
									"// 🚨 BUG DETECTION\r",
									"pm.test(\"🚨 BUG CHECK: Array type validation\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 BUG: Array status value accepted!\");\r",
									"        pm.globals.set(\"bug_array_status\", \"found\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": [\"SHIPPED\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-031-Case-sensitivity-lowercase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Lowercase status handled\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Case insensitive status\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Case sensitivity support\", function () {\r",
									"    console.log(\"✅ Case handling: lowercase 'paid' accepted\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"shipped\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-032-Case-sensitivity-mixed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Mixed case status handled\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Mixed case processing\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.message || responseJson.success).to.be.ok;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"Shipped\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				}
			]
		},
		{
			"name": "Boundary Testing",
			"item": [
				{
					"name": "INV-033-Very-long-status-string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Very long status rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"String length validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error || responseJson.message).to.be.ok;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"PAID_WITH_EXTREMELY_LONG_DESCRIPTION_THAT_EXCEEDS_NORMAL_LIMITS_AND_TESTS_BOUNDARY_CONDITIONS\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-034-Status-with-special-characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Special chars in status rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Character validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error || responseJson.message).to.be.ok;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED@#$%^&*()\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				},
				{
					"name": "INV-035-Invoice-ID-zero",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invoice ID zero rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"ID boundary validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error || responseJson.message).to.be.ok;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/0/status"
					},
					"response": []
				},
				{
					"name": "INV-036-Negative-invoice-ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Negative invoice ID rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Negative ID validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error || responseJson.message).to.be.ok;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/-1/status"
					},
					"response": []
				},
				{
					"name": "INV-037-Very-large-invoice-ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Very large ID returns 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Large ID boundary\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error || responseJson.message).to.be.ok;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/9999999999/status"
					},
					"response": []
				},
				{
					"name": "INV-038-Non-numeric-invoice-ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Non-numeric ID rejected\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"ID format validation\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.error || responseJson.message).to.be.ok;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/abc123/status"
					},
					"response": []
				},
				{
					"name": "INV-039-SQL-injection-in-invoice-ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"SQL injection in ID blocked\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"ID injection security\", function () {\r",
									"    // Should NOT return 500 (server error indicating SQL issue)\r",
									"    pm.expect([500]).to.not.include(pm.response.code);\r",
									"});\r",
									"\r",
									"// 🚨 CRITICAL SECURITY BUG DETECTION\r",
									"pm.test(\"🚨 CRITICAL SECURITY CHECK: SQL injection in ID\", function () {\r",
									"    if (pm.response.code === 500) {\r",
									"        console.log(\"🚨🚨🚨 CRITICAL SECURITY BUG: SQL INJECTION POSSIBLE IN INVOICE ID! 🚨🚨🚨\");\r",
									"        console.log(\"Server error indicates potential SQL vulnerability in URL parameter\");\r",
									"        console.log(\"Payload: 1'; DROP TABLE invoices;--\");\r",
									"        pm.globals.set(\"critical_security_bug_sql_injection\", \"FOUND\");\r",
									"    } else if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 POTENTIAL SECURITY ISSUE: SQL injection payload accepted\");\r",
									"        pm.globals.set(\"security_bug_sql_injection\", \"POTENTIAL\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Database integrity maintained\", function () {\r",
									"    const responseText = pm.response.text().toLowerCase();\r",
									"    pm.expect(responseText).to.not.include(\"sql\");\r",
									"    pm.expect(responseText).to.not.include(\"syntax error\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/1'; DROP TABLE invoices;--/status"
					},
					"response": []
				},
				{
					"name": "INV-040-XSS-attempt-in-status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"XSS in status field blocked\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"XSS prevention active\", function () {\r",
									"    const responseText = pm.response.text();\r",
									"    pm.expect(responseText).to.not.include(\"<script>\");\r",
									"});\r",
									"\r",
									"// 🚨 CRITICAL SECURITY BUG DETECTION\r",
									"pm.test(\"🚨 SECURITY CHECK: XSS prevention in status field\", function () {\r",
									"    if (pm.response.code === 200) {\r",
									"        console.log(\"🚨 CRITICAL SECURITY BUG: XSS payload accepted in status field!\");\r",
									"        pm.globals.set(\"security_bug_xss_status\", \"CRITICAL\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Input sanitization working\", function () {\r",
									"    pm.expect(pm.response.code).to.not.equal(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{auth_token}}"
							}
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"status\": \"SHIPPED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/invoices/{{valid_invoice_id}}/status"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{auth_token}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}